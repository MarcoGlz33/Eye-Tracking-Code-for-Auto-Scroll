import cv2
import numpy as np
import pyautogui
import time

face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')

def detect_eyes(face_roi):
    eyes = eye_cascade.detectMultiScale(face_roi, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
    return eyes

def get_gaze_ratio(eye_frame):
    height, width = eye_frame.shape[:2]
    
    # Use adaptive thresholding
    eye_frame = cv2.equalizeHist(eye_frame)
    _, threshold_eye = cv2.threshold(eye_frame, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    
    # Divide the eye into three vertical sections
    left_side = threshold_eye[:, 0:width//3]
    center = threshold_eye[:, width//3:(2*width)//3]
    right_side = threshold_eye[:, (2*width)//3:]
    
    # Count white pixels in each section
    left_white = cv2.countNonZero(left_side)
    center_white = cv2.countNonZero(center)
    right_white = cv2.countNonZero(right_side)
    
    # Calculate gaze ratio
    if left_white == 0:
        gaze_ratio = 5
    elif right_white == 0:
        gaze_ratio = 0.2
    else:
        gaze_ratio = (left_white + center_white) / (right_white + center_white)
    
    return gaze_ratio

def calibrate(cap):
    print("Calibration: Look straight ahead and press 'c'")
    while True:
        ret, frame = cap.read()
        if not ret:
            print("Error: Cannot read from camera.")
            return False
        cv2.imshow("Calibration", frame)
        if cv2.waitKey(1) & 0xFF == ord('c'):
            break
    cv2.destroyWindow("Calibration")
    print("Calibration complete. You can now use eye-tracking to scroll.")
    return True

def main():
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("Error: Cannot open camera.")
        return

    if not calibrate(cap):
        return
    
    scroll_threshold_up = 1.2
    scroll_threshold_down = 0.8
    last_scroll_time = time.time()
    scroll_cooldown = 0.2
    gaze_ratios = []

    while True:
        ret, frame = cap.read()
        if not ret:
            print("Error: Cannot read frame.")
            break

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, 1.3, 5)

        for (x, y, w, h) in faces:
            roi_gray = gray[y:y+h, x:x+w]
            eyes = detect_eyes(roi_gray)
            
            for (ex, ey, ew, eh) in eyes:
                eye = roi_gray[ey:ey+eh, ex:ex+ew]
                gaze_ratio = get_gaze_ratio(eye)
                gaze_ratios.append(gaze_ratio)
                
                if len(gaze_ratios) > 5:
                    gaze_ratios.pop(0)
                
                avg_gaze_ratio = sum(gaze_ratios) / len(gaze_ratios)
                
                current_time = time.time()
                if current_time - last_scroll_time > scroll_cooldown:
                    if avg_gaze_ratio <= scroll_threshold_down:
                        pyautogui.scroll(-40)  # Scroll down
                        last_scroll_time = current_time
                    elif avg_gaze_ratio >= scroll_threshold_up:
                        pyautogui.scroll(40)  # Scroll up
                        last_scroll_time = current_time

                cv2.putText(frame, f"Gaze Ratio: {avg_gaze_ratio:.2f}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
                break  # Only process one eye

        cv2.imshow('Eye-Tracking', frame)
        
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
